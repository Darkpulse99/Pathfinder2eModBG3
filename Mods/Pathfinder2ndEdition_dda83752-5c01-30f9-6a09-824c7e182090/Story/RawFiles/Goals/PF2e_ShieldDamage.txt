Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_ShieldBlockInterrupts("Interrupt_ShieldBlock");
DB_ShieldBlockInterrupts("QuickShieldBlockInterrupt");
DB_ShieldBlockInterrupts("ShieldWardenBlock");
DB_ShieldBlockInterrupts("MetalShieldBlock");

DB_ShieldTemplates(MAG_Absolute_Protecter_Shield_53b3317f-5a52-41c0-89ea-c6ef31adc4f7, 40, 80, "REPAIR_RARE");
DB_ShieldTemplates(MAG_BG_OfDevotion_Shield_a0bc3295-c01d-405e-8396-e0fa7e1e5340, 52, 104, "REPAIR_VERYRARE");
DB_ShieldTemplates(MAG_ChargedLightning_StaticDischarge_Shield_93c2143c-1c9f-493e-9fee-2310c7bee672, 32, 64, "REPAIR_UNCOMMON");
DB_ShieldTemplates(MAG_Druid_Ironvine_Shield_eb06636a-8052-492e-bfb1-67fcb18358d1, 32, 64, "REPAIR_UNCOMMON");
DB_ShieldTemplates(MAG_Enforcer_NonLethalBlessing_Shield_35be7c52-fe89-4bec-9d15-0d7ddb94bf38, 32, 64, "REPAIR_UNCOMMON");
DB_ShieldTemplates(MAG_FlamingFist_Flaming_Shield_8c7caa2a-7c11-4f0b-86a8-b8808057101b, 40, 80, "REPAIR_RARE");
DB_ShieldTemplates(MAG_Harpers_ShieldsOfShadows_1977f0ae-4269-4024-bb3b-a4cca54fafe0, 32, 64, "REPAIR_UNCOMMON");
DB_ShieldTemplates(MAG_Ketheric_Shield_6cb88e48-70ce-4304-b3b6-db52d1880bec, 40, 80, "REPAIR_RARE");
DB_ShieldTemplates(MAG_LowHP_TemporaryHP_Shield_3374ad91-ddcf-430a-bddd-f48e8699ade9, 32, 64, "REPAIR_UNCOMMON");
DB_ShieldTemplates(MAG_MissileProtection_Shield_e308d17c-7278-44c1-b1fc-853ea3cf5c29, 52, 104, "REPAIR_VERYRARE");
DB_ShieldTemplates(MAG_OB_Paladin_DeathKnight_Shield_b3571443-403b-431b-b4ba-3d943a500f4b, 52, 104, "REPAIR_VERYRARE");
DB_ShieldTemplates(MAG_ofShielding_Shield_dfeaa5fd-1f87-4f99-85b0-8f49664d691f, 40, 80, "REPAIR_RARE");
DB_ShieldTemplates(MAG_PHB_Sentinel_Shield_2baa835f-1422-43f0-9d2a-11e601fbb25e, 40, 80, "REPAIR_RARE");
DB_ShieldTemplates(MAG_Safeguard_Shield_3138b480-3ef6-42af-ba35-e4cad4e962ee, 32, 64, "REPAIR_UNCOMMON");
DB_ShieldTemplates(MAG_Steadfast_Shield_1cee750f-79c6-4109-8272-d27b97ef02df, 52, 104, "REPAIR_VERYRARE");
DB_ShieldTemplates(MAG_TheBulwark_Shield_4f313dde-14bb-43a2-abdd-07b2eb38b33a, 60, 120, "REPAIR_LEGENDARY");
DB_ShieldTemplates(MAG_WoodWoad_Nature_Shield_90ba50bd-3e65-42ec-9f21-6e07d3ed89ab, 32, 64, "REPAIR_UNCOMMON");
DB_ShieldTemplates(MAG_Justiciar_Shield_a189686a-cfcf-4157-9c18-f7a8e7f0be87, 40, 80, "REPAIR_RARE");
DB_ShieldTemplates(UNI_TWN_WPN_HUM_ShieldOfWatcher_D_1_cb2b1ac8-5589-464f-ac9f-ccd6fd27ebed, 32, 64, "REPAIR_UNCOMMON");
DB_ShieldTemplates(WPN_Duergar_Shield_B_1_8cdcb6bb-be71-4f26-9871-9312514c2436, 40, 80, "REPAIR_RARE");
DB_ShieldTemplates(WPN_Duergar_Shield_C_1_b7d8a185-dfc5-4113-ab53-0ca009073c8d, 40, 80, "REPAIR_RARE");
DB_ShieldTemplates(WPN_Drow_Shield_A_0_e4b4c45f-0563-4b00-851c-30a64fcb18ec, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_Drow_Shield_A_0_Absolute_004ab562-5cd4-4f1f-8aa5-497e7e2c5f4f, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_Drow_Shield_A_1_ad0b5ac2-ca57-4538-a326-8e819d6ab034, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_Duergar_Shield_B_0_747387ac-0dc7-47ab-8c69-75269ffc4dbc, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_Duergar_Shield_C_0_31c99c28-f062-44ba-9ee6-cf969af920c4, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_GOB_Shield_A_0_NOT_APPROVED_dd7550d6-112d-476e-9234-4901a95bd7f6, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_GOB_Shield_B_0_NOT_APPROVED_89bb450f-d976-4981-b43e-b5d16948da1e, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_GOB_Shield_C_0_NOT_APPROVED_e0d5a057-328a-467d-b8fb-1bfd298d59e7, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_GOB_Shield_D_0_NOT_APPROVED_33ab760a-e617-4e12-a3c6-1758c83cc3a7, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_GOB_Shield_E_0_NOT_APPROVED_2ae874a1-4573-4de3-a595-444591564303, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_Guardian_of_Faith_Shields_Selune_22dd91be-6433-4569-a7b3-ce3d6ea59b5b, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_GuardianOfFaith_Shield_Evil_65fff410-33fd-49a6-aacd-d24610bc0e7b, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_GuardianOfFaith_Shield_Good_efdb7b03-83b0-4284-b1fb-06c5c78424d0, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_GuardianOfFaith_Shield_Neutral_134a78a5-7a20-415a-9af1-5b141db51d42, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_HUM_Shield_A_0_d2af60ea-1b72-4d25-a188-6d8bc4fe255b, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_HUM_Shield_A_1_cb2d6c27-ec29-4555-adf2-41e8c1952439, 40, 80, "REPAIR_RARE");
DB_ShieldTemplates(WPN_HUM_Shield_A_2_NOT_APPROVED_49979c37-1a3a-46f8-af5b-2ea63fc11722, 52, 104, "REPAIR_VERYRARE");
DB_ShieldTemplates(WPN_HUM_Shield_Adamantine_A_96907713-b560-4daf-ab32-3c1aec3f3890, 40, 80, "REPAIR_RARE");
DB_ShieldTemplates(WPN_HUM_Shield_B_0_24fa28d4-f679-44bf-865e-c7e70dcb9588, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_HUM_Shield_B_1_a28ecc05-b67b-493b-8cd2-ac7229e703d2, 40, 80, "REPAIR_RARE");
DB_ShieldTemplates(WPN_HUM_Shield_Broken_A_d59619ef-320f-4c16-8e21-0644034f0c26, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_HUM_Shield_C_0_4491fcaf-03bf-4087-baf3-b638657080f6, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_HUM_Shield_C_1_badf2418-01ac-410d-931e-72b1dac071c7, 40, 80, "REPAIR_RARE");
DB_ShieldTemplates(WPN_HUM_Shield_D_0_c069f1f2-1040-4c71-b796-5a95eecfa711, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_HUM_Shield_D_0_Rusty_A_8c02c87f-955d-4cc2-b547-f22462ad7106, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_HUM_Shield_D_1_26b81847-b0dd-4150-aef7-602fcbb72eca, 40, 80, "REPAIR_RARE");
DB_ShieldTemplates(WPN_HUM_Shield_DeathKnight_5b8fe99f-56d9-48a8-a9d0-8290ebae6461, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_HUM_Shield_E_2_89792dc1-221b-462e-adcb-026f2cafbb95, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_HUM_Shield_FlamingFist_ab10f66f-6e93-43f5-9384-82565f14124a, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_HUM_Shield_FlamingFist_1_6fb7aabd-bdf8-4fd4-b43c-6cc6c07e99b1, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_HUM_Shield_Myrkul_A_5d4c7c48-8531-494f-8fc3-936122d8a6fa, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_HUM_Toy_Shield_A_e13facc6-aced-4b48-b239-b0e76448013f, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_Kuotoa_Shield_A_0_2099af4a-caa2-4e06-9b6d-fa6e9754bd09, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_Kuotoa_Shield_A_1_917d76c0-1969-4cd5-b5fe-7bf406081283, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_LOW_RamazithsTower_Nightsong_Silver_Shield_daadda55-d439-47eb-a308-acaf575a7fd5, 10, 20, "REPAIR_COMMON");
DB_ShieldTemplates(WPN_Wood_Woad_Shield_41b07341-1bf3-450d-9303-377c035c09ac, 10, 20, "REPAIR_COMMON");

DB_AnvilTemplates(TOOL_Smith_Anvil_A_a79a6a96-0ce7-4f17-b915-1c381dfa0edf);
DB_AnvilTemplates(INTERACT_TOOL_Smith_Anvil_B_73039cac-3746-4fd3-9361-06b630662d13);
DB_AnvilTemplates(TOOL_Ketheric_Anvil_A_d029bf99-3dcb-4682-b67d-215011c8fef6);
DB_AnvilTemplates(TOOL_Ketheric_Anvil_B_4873848c-a509-4890-9c0f-4e6489410874);
DB_AnvilTemplates(TOOL_Smith_Anvil_B_84dc46a0-eb7e-43fb-b3cd-9200bd017a15);
DB_AnvilTemplates(TOOL_Smith_Anvil_CombatThrowable_2bb3ae90-316a-476c-8af3-507940aa7467);
KBSECTION
//REGION Shield block interrupt listeners
// Whenever we use shield block, store it.
IF
ReactionInterruptUsed((CHARACTER)_Defender, (STRING)_Interrupt, _)
AND
DB_ShieldBlockInterrupts(_Interrupt)
AND
GetEquippedShield(_Defender, (ITEM)_Shield)
THEN
DB_ShieldBlockUsed(_Defender, _Shield);

// Fallback: If we somehow manage to shield block with a shield that wasn't in our DB, add it.
// This will also catch NPC shield usage, as they never equip their shields.
IF
ReactionInterruptUsed((CHARACTER)_Defender, (STRING)_Interrupt, _)
AND
DB_ShieldBlockInterrupts(_Interrupt)
AND
GetEquippedShield(_Defender, (ITEM)_Shield)
AND
NOT DB_ShieldDamage(_Shield, _)
THEN
DB_ShieldDamage(_Shield, 0);
//END_REGION

//REGION Damage listener
// If the character takes damage (including 0) after using shield block, calculate the new total damage and apply.
IF
AttackedBy((CHARACTER)_Defender, _, (CHARACTER)_Attacker, (STRING)_DamageType, (INTEGER)_DamageAmount, _, _)
AND
GetEquippedShield(_Defender, (ITEM)_Shield)
AND
DB_ShieldBlockUsed(_Defender, _Shield)
AND
DB_ShieldDamage(_Shield, (INTEGER)_Damage)
AND
IntegerSum(_Damage, _DamageAmount, (INTEGER)_NewDamage)
THEN
NOT DB_ShieldDamage(_Shield, _Damage);
DB_ShieldDamage(_Shield, _NewDamage);
PROC_RemoveShieldStatuses(_Shield);
PROC_ApplyNewShieldStatus(_Shield, _NewDamage);
PROC_CheckShieldDamaged(_Shield, _NewDamage);
PROC_CheckShieldBreak(_Shield, _Shield, _NewDamage, _Defender);
PROC_CheckShieldDestroy(_Shield, _Shield, _NewDamage, _Defender, _Attacker);
NOT DB_ShieldBlockUsed(_Defender, _Shield);

//REGION Status update procs
// Don't trust overwrite behaviour to always play nice, just remove the statuses.
PROC
PROC_RemoveShieldStatuses((GUIDSTRING)_ShieldGUID)
THEN
RemoveStatus(_ShieldGUID, "SHIELD_BROKEN");
RemoveStatus(_ShieldGUID, "SHIELD_HEALTH");
RemoveStatus(_ShieldGUID, "SHIELD_DAMAGED");

// Apply a frozen duration status with a duration to indicate current shield HP.
// Some calculations are required to get to a duration in seconds.
// Note that no status is applied if a shield is broken.
PROC
PROC_ApplyNewShieldStatus((GUIDSTRING)_ShieldGUID, (INTEGER)_Damage)
AND
GetTemplate(_ShieldGUID, (GUIDSTRING)_Template)
AND
DB_ShieldTemplates(_Template, _, (INTEGER)_HP, _)
AND
IntegerSubtract(_HP, _Damage, (INTEGER)_Current)
AND
IntegerToReal(_Current, (REAL)_CurrentReal)
AND
_CurrentReal > 0.5
AND
RealProduct(_CurrentReal, 6.0, (REAL)_Duration)
THEN
ApplyStatus(_ShieldGUID, "SHIELD_HEALTH", _Duration, 1);

// If the damage is more than 0, apply the damaged condition.
PROC
PROC_CheckShieldDamaged((GUIDSTRING)_ShieldGUID, (INTEGER)_Damage)
AND
HasActiveStatus(_ShieldGUID, "SHIELD_DAMAGED", 0)
AND
_Damage > 0
THEN
ApplyStatus(_ShieldGUID, "SHIELD_DAMAGED", -1.0, 1);

// If the damage exceeds the threshold, apply the broken condition and unequip.
PROC
PROC_CheckShieldBreak((GUIDSTRING)_ShieldGUID, (ITEM)_Shield, (INTEGER)_Damage, (CHARACTER)_Owner)
AND
GetTemplate(_ShieldGUID, (GUIDSTRING)_Template)
AND
DB_ShieldTemplates(_Template, (INTEGER)_BreakThreshold, _, _)
AND
IntegerSubtract(_BreakThreshold, 1, (INTEGER)_BTMinusOne)
AND
HasActiveStatus(_ShieldGUID, "SHIELD_BROKEN", 0)
AND
_Damage > _BTMinusOne
THEN
ApplyStatus(_ShieldGUID, "SHIELD_BROKEN", -1.0, 1);
Unequip(_Owner, _Shield);

PROC
PROC_CheckShieldDestroy((GUIDSTRING)_ShieldGUID, (ITEM)_Shield, (INTEGER)_Damage, (CHARACTER)_Owner, (GUIDSTRING)_Attacker)
AND
GetTemplate(_ShieldGUID, (GUIDSTRING)_Template)
AND
DB_ShieldTemplates(_Template, _, (INTEGER)_DestroyThreshold, _)
AND
_Damage > _DestroyThreshold
THEN
Unequip(_Owner, _Shield);
Die(_ShieldGUID, DEATHTYPE.None, _Attacker, 0, 0, 1.0);
//END_REGION

//REGION Equipping listeners.
// When we first equip a shield, add it to the damage DB.
IF
Equipped((ITEM)_Shield, (CHARACTER)_Owner)
AND
NOT DB_ShieldDamage(_Shield, _)
THEN
DB_ShieldDamage(_Shield, 0);

// When we equip a shield, update its statuses.
IF
Equipped((ITEM)_Shield, (CHARACTER)_Owner)
AND
DB_ShieldDamage(_Shield, (INTEGER)_Damage)
THEN
PROC_RemoveShieldStatuses(_Shield);
PROC_ApplyNewShieldStatus(_Shield, _Damage);
PROC_CheckShieldDamaged(_Shield, _Damage);
PROC_CheckShieldBreak(_Shield, _Shield, _Damage, _Owner);
//END_REGION

//REGION Repair
// Repair shield by 5 HP every time it receives SHIELD_REPAIR condition, and reapply statuses.
IF
StatusApplied((ITEM)_Shield, "SHIELD_REPAIR", (CHARACTER)_Cause, _)
AND
DB_ShieldDamage(_Shield, (INTEGER)_Damage)
AND
IntegerSubtract(_Damage, 5, (INTEGER)_NewDamage)
THEN
NOT DB_ShieldDamage(_Shield, _Damage);
DB_ShieldDamage(_Shield, _NewDamage);
PROC_RemoveShieldStatuses(_Shield);
PROC_ApplyNewShieldStatus(_Shield, _NewDamage);
PROC_CheckShieldDamaged(_Shield, _NewDamage);
PROC_CheckShieldBreak(_Shield, _Shield, _NewDamage, _Cause);
PROC_CheckNegativeShieldDamage(_Shield);

// Make sure we never have negative shield damage.
PROC
PROC_CheckNegativeShieldDamage((ITEM)_Shield)
AND
DB_ShieldDamage(_Shield, (INTEGER)_Damage)
AND
_Damage < 0
THEN
NOT DB_ShieldDamage(_Shield, _Damage);
DB_ShieldDamage(_Shield, 0);
PROC_RemoveShieldStatuses(_Shield);
PROC_ApplyNewShieldStatus(_Shield, 0);
//END_REGION

//REGION Shield repair action
// Listen for the user to combine an anvil and a damaged shield. Apply a rarity-adjusted status to make skill check.
IF
RequestCanCombine((CHARACTER)_Player, (ITEM)_Tool, (ITEM)_Shield, _, _, _, (INTEGER)_RequestID)
AND
QRY_IsAnvil(_Tool)
AND
DB_ShieldDamage(_Shield, _Damage)
AND
_Damage > 0
THEN
PROC_ClearOutRepairDB();
PROC_CheckInsufficientGold(_Shield, _Player, _RequestID);
PROC_ChargeGold(_Shield, _Player, _RequestID, _Tool);

QRY
QRY_IsAnvil((GUIDSTRING)_Anvil)
AND
GetTemplate(_Anvil, (GUIDSTRING)_Template)
AND
DB_AnvilTemplates(_Template)
THEN
DB_NOOP(1);

PROC
PROC_ClearOutRepairDB()
AND
DB_ShieldToRepair((CHARACTER)_Player, (ITEM)_Shield)
THEN
NOT DB_ShieldToRepair(_Player, _Shield);

// Putting this in a proc allows us to have diverging behaviours.
PROC
PROC_CheckInsufficientGold((ITEM)_Shield, (CHARACTER)_Player, (INTEGER)_RequestID)
AND
ItemGetGoldValue(_Shield, (INTEGER)_Value)
AND
IntegerDivide(_Value, 4, (INTEGER)_RepairCost)
AND
UserGetGold((CHARACTER)_Player, (INTEGER)_Gold)
AND
_Gold < _RepairCost
THEN
RequestProcessed(_Player, _RequestID, 0);
ApplyStatus(_Player, "INSUFFICIENT_GOLD", 0.0, 1);

// Opposite conditions to PROC_CheckInsufficientGold.
PROC
PROC_ChargeGold((ITEM)_Shield, (CHARACTER)_Player, (INTEGER)_RequestID, (ITEM)_Tool)
AND
ItemGetGoldValue(_Shield, (INTEGER)_Value)
AND
IntegerDivide(_Value, 2, (INTEGER)_RepairCost)
AND
UserGetGold((CHARACTER)_Player, (INTEGER)_Gold)
AND
IntegerSubtract(_RepairCost, 1, (INTEGER)_RepairCostSubOne)
AND
_Gold > _RepairCostSubOne
AND
IntegerSubtract(0, _RepairCost, (INTEGER)_RepairCostNegative)
THEN
RequestProcessed(_Player, _RequestID, 1);
UserAddGold(_Player, _RepairCostNegative);
DB_ShieldToRepair(_Player, _Shield);
PROC_CastRepairSpell(_Shield, _Player, _Tool);

PROC
PROC_CastRepairSpell((GUIDSTRING)_ShieldGUID, (GUIDSTRING)_Player, (GUIDSTRING)_Tool)
AND
GetTemplate(_ShieldGUID, (GUIDSTRING)_Template)
AND
DB_ShieldTemplates(_Template, _, _, (STRING)_Status)
THEN
ApplyStatus(_Player, _Status, 2.0, 0, _Player);
UseSpell(_Player, "Target_Repair", _Tool);

// The player receives this condition one time for each 5 HP that should be repaired.
IF
StatusApplied((CHARACTER)_Player, "REPAIR_PROC", _, _)
AND
DB_ShieldToRepair(_Player, (ITEM)_Shield)
THEN
PROC_ApplyRepair(_Shield, _Player);

// Casts to GUIDSTRING
PROC
PROC_ApplyRepair((GUIDSTRING)_Shield, (GUIDSTRING)_Player)
THEN
ApplyStatus(_Shield, "SHIELD_REPAIR", 0.0, 1, _Player);

// The player receives this condition if the thing they are repairing should be damaged 2d6.
IF
StatusApplied((CHARACTER)_Player, "REPAIR_FAILED", _, _)
AND
DB_ShieldToRepair(_Player, (ITEM)_Shield)
AND
DB_ShieldDamage(_Shield, (INTEGER)_OldDamage)
AND
Random(6, (INTEGER)_DiceOne)
AND
Random(6, (INTEGER)_DiceTwo)
AND
IntegerSum(_DiceOne, _DiceTwo, (INTEGER)_DiceTotal)
AND
IntegerSum(_DiceTotal, 2, (INTEGER)_DamageDealt)
AND
IntegerSum(_DamageDealt, _OldDamage, (INTEGER)_NewDamage)
THEN
NOT DB_ShieldDamage(_Shield, _OldDamage);
DB_ShieldDamage(_Shield, _NewDamage);
NOT DB_ShieldToRepair(_Player, _Shield);
PROC_RemoveShieldStatuses(_Shield);
PROC_ApplyNewShieldStatus(_Shield, _NewDamage);
PROC_CheckShieldDamaged(_Shield, _NewDamage);
PROC_CheckShieldBreak(_Shield, _Shield, _NewDamage, _Player);
PROC_CheckShieldDestroy(_Shield, _Shield, _NewDamage, _Player, _Player);
//END_REGION
EXITSECTION

ENDEXITSECTION
